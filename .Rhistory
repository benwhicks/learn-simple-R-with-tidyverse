iris
iris
library(tidyverse)
library(usethis)
use_readme_rmd()
names(tib_mtcars) # gets the variable names
# create tibble versions of the mtcars and iris tables
tib_mtcars <- as_tibble(mtcars)
names(mtcars) # gets the variable names
tib_mtcars %>%
names()  # does the same thing.
mtcars %>%
names()  # does the same thing.
mtcars %>%
names   # you can skip the () if no other inputs to the 'names' function are needed
mtcars %>%
select(mpg, disp, hp)
tib_mtcars %>%
select(mpg, disp, hp)
tib_mtcars %>%
select(starts_with('h'))
tib_mtcars %>%
select(starts_with('h|m'))
tib_mtcars %>%
select(starts_with('m'))
tib_mtcars %>%
select(starts_with('c'))
# Order by a variable
tib_mtcars %>%
arrange(mpg, hp) %>%
head(4) # head just looks at the top few
# Order by a variable
tib_mtcars %>%
arrange(mpg, desc(hp)) %>%  # if you wrap a variable in desc() it reverses the order
head(4) # head just looks at the top n
mtcars$disp
# the tidyverse way
mtcars %>%
pull(disp)
# we can then compute stuff
mean(mtcars$hp)
mtcars %>%
pull(hp) %>%
mean()
tib_mtcars %>%
filter(mpg > 15)
tib_mtcars %>%
filter(mpg > 20, hp > 100)
# find the mean mpg of high hp cars
tib_mtcars %>%
filter(hp > 100) %>%
pull(mpg) %>%
mean()
tib_mtcars %>%
summary()
tib_mtcars %>%
group_by(am) %>%
summary()
tib_mtcars %>%
group_by(am) %>%
summarise(mpg = mean(mpg),
hp = mean(hp))
tib_mtcars %>%
group_by(gear > 3) %>%
tally()
tib_mtcars %>%
group_by(am) %>% # Break the data into groups based on the variable am
summarise(mpg = mean(mpg),
mpg.sd = sd(mpg),
hp = mean(hp),
hp.sd = sd(hp))
tib_mtcars %>%
group_by(am) %>% # Break the data into groups based on the variable am
summarise(mpg = mean(mpg),
mpg.sd = sd(mpg, na.rm = T),
hp = mean(hp),
hp.sd = sd(hp))
tib_mtcars %>%
group_by(am) %>% # Break the data into groups based on the variable am
summarise(mpg = mean(mpg),
mpg_sd = sd(mpg, na.rm = T),
hp = mean(hp),
hp.sd = sd(hp))
tib_mtcars %>%
group_by(am) %>% # Break the data into groups based on the variable am
summarise(mpg = mean(mpg),
mpg_sd = max(mpg),
hp = mean(hp),
hp.sd = sd(hp))
tib_mtcars %>%
group_by(am) %>% # Break the data into groups based on the variable am
summarise(mpg = mean(mpg),
mpg_max = max(mpg),
hp = mean(hp),
hp_max = max(hp))
tib_mtcars %>%
group_by(am) %>% # Break the data into groups based on the variable am
summarise(mpg = mean(mpg),
mpg_max = max(mpg),
hp = mean(hp),
hp_max = max(hp))
mtcars %>%
group_by(am) %>% # Break the data into groups based on the variable am
summarise(mpg = mean(mpg),
mpg_max = max(mpg),
hp = mean(hp),
hp_max = max(hp))
mtcars %>%
filter(am == 1) %>%
pull(mpg) %>%
mean()
mtcars %>%
group_by(am) %>% # Break the data into groups based on the variable am
summarise(mpg = mean(mpg),
hp = mean(hp))
mtcars %>%
group_by(am) %>% # Break the data into groups based on the variable am
summarise(mpg = mean(mpg),
hp = mean(hp),
number = n())
mtcars %>%
group_by(am) %>% # Break the data into groups based on the variable am
summarise(mpg = mean(mpg),
hp = mean(hp),
number_of_cars = n())
# even lazier counting
tib_mtcars %>%
count(hp)
# even lazier counting
tib_mtcars %>%
count(am)
mtcars %>%
ggplot(aes(x = hp, y = mpg)) + # Note that this is +, not %>%. We are now 'laryering' the graphical elements
geom_point() + # This adds a 'geom' (visual element) to the data. If you type geom_ you should see the different options
ggtitle("A big title", subtitle = "A bit underneath")
mtcars %>%
ggplot(aes(x = hp, y = mpg)) + # Note that this is +, not %>%. We are now 'laryering' the graphical elements
geom_point() + # This adds a 'geom' (visual element) to the data. If you type geom_ you should see the different options
ggtitle("A big title", subtitle = "A bit underneath") +
theme_minimal()
mtcars %>%
ggplot(aes(x = hp, y = mpg, colour = am)) + # Note that this is +, not %>%. We are now 'laryering' the graphical elements
geom_point() + # This adds a 'geom' (visual element) to the data. If you type geom_ you should see the different options
ggtitle("A big title", subtitle = "A bit underneath") +
theme_minimal()
names(mtcars)
mtcars %>%
ggplot(aes(x = hp, y = mpg, colour = disp)) + # Note that this is +, not %>%. We are now 'laryering' the graphical elements
geom_point() + # This adds a 'geom' (visual element) to the data. If you type geom_ you should see the different options
ggtitle("A big title", subtitle = "A bit underneath") +
theme_minimal()
# We can combine this with the filtering...
mtcars %>%
filter(am ==1, mpg > 20) %>%
ggplot(aes(x = hp, y = mpg)) +
geom_point()
# We can combine this with the filtering...
mtcars %>%
filter(am ==1, mpg > 20) %>%
ggplot(aes(x = hp, y = mpg)) +
geom_point() +
ggtitle("A filtered graph") +
theme_dark()
names(csu.retention::contact)
?csu.retention::contact
band_instruments
