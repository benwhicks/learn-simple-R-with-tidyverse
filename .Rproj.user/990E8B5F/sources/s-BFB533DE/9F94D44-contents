---
output: github_document
---


```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

# learn-simple-R-with-tidyverse

The goal of `learn-simple-R-with-tidyverse` is to provide a gentle inroduction to R, focusing on utilising the `tidyverse` packages. To use this guide you will need to install [R](https://www.r-project.org/) and [RStudio](https://rstudio.com/).

## R, Packages and the Tidyverse

R is a statistical programming language supported that is free and open-source. One of it's biggest strengths is the community contribution of 'packages', which are collections of code and data wrapped up and freely distributed for people to use. Because of the freedom in how R is written there are often multiple ways to do exactly the same thing. This can be confusing.

The [tidyverse](https://www.tidyverse.org/) is a collection of packages that follow a similar style of coding, which I find easier to understand and harder to create weird errors within. There is a solid video introduction [here](https://www.youtube.com/watch?v=WM2hctrlMts) - just watch the first half, especially if you are not sure where to type stuff in RStudio.

To install the tidyverse you need to run the code `install.packages('tidyverse')`. 

To use the tidyvese collection of packages you need to load the tidyverse. 


``` {r load_tidyverse}
# Anything following a # is a comment
# Below we load the tidyverse collection of packages
library(tidyverse)
```

Bonus package: You might want to try out the package `lubridate` as well if you ever have to deal with dates and times. It is not part of the tidyverse per se but is commonly included in tidyverse style workflow. 


## Looking at data, tibbles

R automatically loads in some default data sets. If you type `mtcars` or `iris` into the console then R will show you the data - which is just a table of values (called a data frame). The first cool thing about the tidyverse is the tibble; which is just a souped up version of a data frame. 

``` {r pretty_printing}
# create tibble versions of the mtcars and iris tables
tib_mtcars <- as_tibble(mtcars)
tib_iris <- as_tibble(iris)

# See how mtcars prints now...
tib_mtcars
```

You can also take a closer look in RStudio by typing `View(tib_mtcars)`. See if you can test out the following examples, but use the `iris` data set. The 'pipe' operator, ` %>% `, work like saying 'take this _and then_ do this'. It's a bit tricky to type so you can use `Ctrl-Shift-M` to type it instead.


``` {r taking_a_closer_look}
names(mtcars) # gets the variable names

mtcars %>% 
  names()  # does the same thing. 

mtcars %>% 
  names   # you can skip the () if no other inputs to the 'names' function are needed

tib_mtcars %>% 
  select(mpg, disp, hp)

tib_mtcars %>% 
  select(starts_with('c'))

# get the first 3 rows
tib_mtcars %>% 
  slice(1:3)

# Order by a variable
tib_mtcars %>% 
  arrange(mpg, desc(hp)) %>%  # if you wrap a variable in desc() it reverses the order 
  head(4) # head just looks at the top n
```

## Subsetting and extracting variables

There are *heaps* of ways to do this in R, and this will probably be the only non-tidyverse thing to show you, and that is the `$` method of getting a variable. The nice thing about the `$` sign is that it is a quick way to remind yourself what variables are in the data set, just type the object followed by a `$` sign (`mtcars$`) and the variables come up as options.

``` {r extracting_a_variable}
mtcars$disp

# the tidyverse way
mtcars %>% 
  pull(disp)

# we can then compute stuff
mean(mtcars$hp)

mtcars %>% 
  pull(hp) %>% 
  mean()
```

This starts to get more powerful if we subset as well.

``` {r subsetting}
tib_mtcars %>% 
  filter(mpg > 20, hp > 100)

# find the mean mpg of high hp cars
tib_mtcars %>% 
  filter(hp > 100) %>% 
  pull(mpg) %>% 
  mean()
```

## Summaries and Grouping

But what if we just want a quick summary of the data? Or summarise by groups?

``` {r summaries_and_groups}
# A generic summary
tib_mtcars %>% 
  summary()

mtcars %>% 
  group_by(am) %>% # Break the data into groups based on the variable am
  summarise(mpg = mean(mpg),
            hp = mean(hp),
            number_of_cars = n())

# This is how we would have got it for just the one case
mtcars %>% 
  filter(am == 1) %>% 
  pull(mpg) %>% 
  mean()

tib_mtcars %>% 
  group_by(gear > 3) %>% # You can group according to a condition
  tally() # tally is a lazy way of just counting 

# even lazier counting
tib_mtcars %>% 
  count(am)
```